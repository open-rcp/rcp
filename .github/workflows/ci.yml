name: CI

on:
  push:
    branches: [ "master" ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'LICENSE'
      - '.gitignore'
      - 'CHANGELOG.md'
      - 'CODE_OF_CONDUCT.md'
      - 'CONTRIBUTING.md'
  pull_request:
    branches: [ "master" ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'LICENSE'
      - '.gitignore'
      - 'CHANGELOG.md'
      - 'CODE_OF_CONDUCT.md'
      - 'CONTRIBUTING.md'

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"

jobs:
  build:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    outputs:
      build_success: ${{ steps.build_status.outputs.status }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]
        include:
          - os: ubuntu-latest
            platform: linux
            deps_cmd: >
              sudo apt-get update && 
              sudo apt-get install -y libglib2.0-dev libgtk-3-dev libwebkit2gtk-4.1-dev pkg-config
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            platform: windows
            deps_cmd: |
              choco install pkgconfiglite
              rustup toolchain install stable-x86_64-pc-windows-gnu
              rustup default stable-x86_64-pc-windows-gnu
            target: x86_64-pc-windows-gnu
            pkg_config_path: C:\ProgramData\chocolatey\lib\pkgconfiglite\tools\bin
          - os: macos-latest
            platform: macos
            deps_cmd: brew install pkg-config
            target: x86_64-apple-darwin
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive
    
    # Initialize and update git submodules if checkout didn't handle them
    - name: Initialize git submodules
      run: |
        git submodule update --init --recursive
      shell: bash
    
    # Platform dependencies for Linux
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: ${{ matrix.deps_cmd }}
      shell: bash
      
    # Platform dependencies for macOS
    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: ${{ matrix.deps_cmd }}
      shell: bash
      
    # Platform dependencies for Windows
    - name: Install Windows dependencies
      if: matrix.os == 'windows-latest'
      run: ${{ matrix.deps_cmd }}
      shell: powershell
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: clippy, rustfmt
        targets: ${{ matrix.target }}
    
    # Enhanced Rust cache with specific target and version
    - name: Cargo Build Cache
      uses: swatinem/rust-cache@v2
      with:
        shared-key: "rcp-${{ matrix.os }}-${{ hashFiles('**/Cargo.lock') }}"
        cache-on-failure: true
        save-if: ${{ github.ref == 'refs/heads/master' }}
    
    # Cache other project-specific files (docs, etc.)
    - name: Project Cache
      uses: actions/cache@v3
      with:
        path: |
          target/doc
          target/debug/deps
        key: rcp-${{ matrix.os }}-${{ hashFiles('**/Cargo.lock', '**/*.rs') }}
        restore-keys: |
          rcp-${{ matrix.os }}-
    
    # Check formatting first (fast)
    - name: Check code formatting
      run: cargo fmt --all -- --check
    
    # Run clippy (also relatively fast)
    - name: Run clippy with warnings as errors
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    # Only after checks pass, do the actual build
    - name: Build
      run: cargo build --verbose --target ${{ matrix.target }}
      env:
        PKG_CONFIG_PATH: ${{ matrix.pkg_config_path || '' }}
    
    # Run tests with smart caching
    - name: Run tests
      run: cargo test --all-targets --all-features --verbose --target ${{ matrix.target }}
      if: ${{ !contains(github.event.head_commit.message, '[skip-tests]') }}
      env:
        PKG_CONFIG_PATH: ${{ matrix.pkg_config_path || '' }}
    
    # Build docs
    - name: Build docs
      run: cargo doc --no-deps --verbose
      
    - name: Set build status
      id: build_status
      if: always()
      run: echo "status=${{ job.status == 'success' }}" >> $GITHUB_OUTPUT
    
    # Archive build artifacts for reuse in release workflows
    - name: Archive build artifacts
      if: success() && github.ref == 'refs/heads/master'
      uses: actions/upload-artifact@v4
      with:
        name: rcp-${{ matrix.platform }}-artifacts
        path: |
          target/${{ matrix.target }}/debug/rcpcli${{ matrix.platform == 'windows' && '.exe' || '' }}
          target/${{ matrix.target }}/debug/rcpdaemon${{ matrix.platform == 'windows' && '.exe' || '' }}
        retention-days: 2

  cache-dependencies:
    name: Cache Dependencies
    needs: build
    runs-on: ubuntu-latest
    if: success() && github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Create a cache of the Cargo.lock file to detect changes
      - name: Create dependencies cache
        uses: actions/cache@v3
        with:
          path: Cargo.lock
          key: cargo-deps-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Update cache timestamp
        run: |
          echo "Dependencies cached at $(date -u)" > .cache-timestamp
          echo "Commit: ${{ github.sha }}" >> .cache-timestamp
      
      - name: Upload cache timestamp
        uses: actions/upload-artifact@v4
        with:
          name: cache-timestamp
          path: .cache-timestamp
          retention-days: 1
