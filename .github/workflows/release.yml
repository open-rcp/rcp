name: Build and Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g. v0.1.0)'
        required: true
        default: 'v0.1.0'

# Add permissions block for GITHUB_TOKEN
permissions:
  contents: write
  discussions: write

env:
  CARGO_TERM_COLOR: always

jobs:
  create_release:
    name: Create Release
    # Only run when a tag is pushed or on manual workflow dispatch
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          # Remove refs/tags/ prefix
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
    
    - name: Validate version format
      run: |
        VERSION="${{ steps.get_version.outputs.version }}"
        
        # Check if version starts with v and followed by numbers and dots
        if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
          echo "::error::Invalid version format: $VERSION. Version must start with 'v' followed by semantic version (e.g. v1.2.3)"
          exit 1
        fi
        
        echo "Version format is valid: $VERSION"
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        release_name: Release ${{ steps.get_version.outputs.version }}
        draft: true
        prerelease: false
        body: |
          ## RCP ${{ steps.get_version.outputs.version }}
          
          Please refer to [CHANGELOG.md](https://github.com/open-rcp/rcp/blob/main/CHANGELOG.md) for detailed changes.
          
          ### Downloads
          
          Each package includes the binary and necessary configuration files.
          
          #### Windows
          - `rcp-server-windows.zip`
          - `rcp-client-windows.zip`
          - `rcp-bridge-windows.zip`
          
          #### Linux
          - `rcp-server-linux.tar.gz`
          - `rcp-client-linux.tar.gz`
          - `rcp-bridge-linux.tar.gz`
          
          #### macOS
          - `rcp-server-macos.tar.gz`
          - `rcp-client-macos.tar.gz`
          - `rcp-bridge-macos.tar.gz`

  build:
    name: Build for ${{ matrix.os }}
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            target: x86_64-unknown-linux-gnu
            archive_ext: tar.gz
            archive_cmd: tar -czf
          - os: windows-latest
            platform: windows
            target: x86_64-pc-windows-msvc
            archive_ext: zip
            archive_cmd: zip -r
          - os: macos-latest
            platform: macos
            target: x86_64-apple-darwin
            archive_ext: tar.gz
            archive_cmd: tar -czf
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        target: ${{ matrix.target }}
    
    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        shared-key: "build-${{ matrix.target }}"
    
    - name: Install dependencies for Linux
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config zip unzip
    
    - name: Build Server
      run: cargo build --release --package rcp-server --target ${{ matrix.target }}
    
    - name: Build Client
      run: cargo build --release --package rcp-client --target ${{ matrix.target }}
    
    - name: Build WebSocket Bridge
      run: cargo build --release --package rcp-ws-bridge --target ${{ matrix.target }}
    
    # Server package preparation
    - name: Create Server Package Directory
      run: mkdir -p rcp-server-pkg
      shell: bash
    
    - name: Copy Server Binary (Windows)
      if: matrix.platform == 'windows'
      run: |
        cp target/${{ matrix.target }}/release/rcp-server.exe rcp-server-pkg/rcp-server.exe
        cp config.toml rcp-server-pkg/
      shell: bash
    
    - name: Copy Server Binary (Linux/macOS)
      if: matrix.platform != 'windows'
      run: |
        cp target/${{ matrix.target }}/release/rcp-server rcp-server-pkg/rcp-server
        cp config.toml rcp-server-pkg/
      shell: bash
    
    - name: Package Server (Windows)
      if: matrix.platform == 'windows'
      run: Compress-Archive -Path rcp-server-pkg/* -DestinationPath rcp-server-windows.zip
      shell: pwsh
    
    - name: Package Server (Linux/macOS)
      if: matrix.platform != 'windows'
      run: tar -czf rcp-server-${{ matrix.platform }}.${{ matrix.archive_ext }} -C rcp-server-pkg .
      shell: bash
    
    # Client package preparation
    - name: Create Client Package Directory
      run: mkdir -p rcp-client-pkg
      shell: bash
    
    - name: Copy Client Binary (Windows)
      if: matrix.platform == 'windows'
      run: |
        cp target/${{ matrix.target }}/release/rcp-client.exe rcp-client-pkg/rcp-client.exe
        cp config.toml rcp-client-pkg/
      shell: bash
    
    - name: Copy Client Binary (Linux/macOS)
      if: matrix.platform != 'windows'
      run: |
        cp target/${{ matrix.target }}/release/rcp-client rcp-client-pkg/rcp-client
        cp config.toml rcp-client-pkg/
      shell: bash
    
    - name: Package Client (Windows)
      if: matrix.platform == 'windows'
      run: Compress-Archive -Path rcp-client-pkg/* -DestinationPath rcp-client-windows.zip
      shell: pwsh
    
    - name: Package Client (Linux/macOS)
      if: matrix.platform != 'windows'
      run: tar -czf rcp-client-${{ matrix.platform }}.${{ matrix.archive_ext }} -C rcp-client-pkg .
      shell: bash
    
    # Bridge package preparation
    - name: Create Bridge Package Directory
      run: mkdir -p rcp-bridge-pkg
      shell: bash
    
    - name: Copy Bridge Binary (Windows)
      if: matrix.platform == 'windows'
      run: |
        cp target/${{ matrix.target }}/release/rcp-ws-bridge.exe rcp-bridge-pkg/rcp-bridge.exe
        cp config.toml rcp-bridge-pkg/
      shell: bash
    
    - name: Copy Bridge Binary (Linux/macOS)
      if: matrix.platform != 'windows'
      run: |
        cp target/${{ matrix.target }}/release/rcp-ws-bridge rcp-bridge-pkg/rcp-bridge
        cp config.toml rcp-bridge-pkg/
      shell: bash
    
    - name: Package Bridge (Windows)
      if: matrix.platform == 'windows'
      run: Compress-Archive -Path rcp-bridge-pkg/* -DestinationPath rcp-bridge-windows.zip
      shell: pwsh
    
    - name: Package Bridge (Linux/macOS)
      if: matrix.platform != 'windows'
      run: tar -czf rcp-bridge-${{ matrix.platform }}.${{ matrix.archive_ext }} -C rcp-bridge-pkg .
      shell: bash
    
    # Upload assets
    - name: Upload Server Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ./rcp-server-${{ matrix.platform }}.${{ matrix.archive_ext }}
        asset_name: rcp-server-${{ matrix.platform }}.${{ matrix.archive_ext }}
        asset_content_type: ${{ matrix.platform == 'windows' && 'application/zip' || 'application/gzip' }}
    
    - name: Upload Client Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ./rcp-client-${{ matrix.platform }}.${{ matrix.archive_ext }}
        asset_name: rcp-client-${{ matrix.platform }}.${{ matrix.archive_ext }}
        asset_content_type: ${{ matrix.platform == 'windows' && 'application/zip' || 'application/gzip' }}
    
    - name: Upload Bridge Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ./rcp-bridge-${{ matrix.platform }}.${{ matrix.archive_ext }}
        asset_name: rcp-bridge-${{ matrix.platform }}.${{ matrix.archive_ext }}
        asset_content_type: ${{ matrix.platform == 'windows' && 'application/zip' || 'application/gzip' }}

  publish:
    name: Publish Release
    needs: [create_release, build]
    runs-on: ubuntu-latest
    if: ${{ !failure() && !cancelled() }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      
      - name: Publish to crates.io
        run: |
          echo "Skipping crates.io publication by default"
          echo "To publish to crates.io, uncomment the publication step in the workflow file"
          
          # Uncomment the following section to enable crates.io publishing
          # if [ -n "${{ secrets.CRATES_IO_TOKEN }}" ]; then
          #   echo "Publishing to crates.io..."
          #   cargo login ${{ secrets.CRATES_IO_TOKEN }}
          #   
          #   # Try to publish each crate, but continue on error
          #   cd rcp-core && cargo publish --allow-dirty || echo "Failed to publish rcp-core, it may already exist"
          #   
          #   # Wait a bit for crates.io to index
          #   sleep 30
          #   
          #   cd ../rcp-client && cargo publish --allow-dirty || echo "Failed to publish rcp-client, it may already exist"
          #   cd ../rcp-server && cargo publish --allow-dirty || echo "Failed to publish rcp-server, it may already exist"
          #   cd ../rcp-ws-bridge && cargo publish --allow-dirty || echo "Failed to publish rcp-ws-bridge, it may already exist"
          # else
          #   echo "CRATES_IO_TOKEN is not set. Skipping publish to crates.io."
          #   echo "To publish to crates.io, add a repository secret named CRATES_IO_TOKEN"
        if: ${{ false }}  # This line ensures this step is always skipped
      
      - name: Finalize GitHub Release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // For workflow_dispatch events, use the specified version
            // For tag events, extract the tag name from GITHUB_REF
            let versionTag = '${{ needs.create_release.outputs.version }}';
            
            // Make sure the version tag doesn't include 'refs/tags/' prefix
            if (versionTag.startsWith('refs/tags/')) {
              versionTag = versionTag.replace('refs/tags/', '');
            }
            
            console.log(`Looking for draft release with tag: ${versionTag}`);
            
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 10
            });
            
            // Find the draft release with matching tag
            const draftRelease = releases.find(release => 
              release.draft === true && 
              release.tag_name === versionTag
            );
            
            if (draftRelease) {
              console.log(`Finalizing release id: ${draftRelease.id}`);
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: draftRelease.id,
                draft: false
              });
              console.log(`Successfully finalized release: ${versionTag}`);
            } else {
              console.log(`No matching draft release found for tag: ${versionTag}`);
              console.log('Available releases:');
              releases.forEach(release => {
                console.log(`- ${release.tag_name} (Draft: ${release.draft})`);
              });
            }